<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
      https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.5</version>
		<relativePath/>
	</parent>

	<groupId>com.trader</groupId>
	<artifactId>backend</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>backend</name>

        <properties>
                <java.version>17</java.version>
                <!-- align your Protobuf versions here -->
                <protoc.version>3.21.12</protoc.version>
        </properties>

        <!-- Additional repositories -->
        <repositories>
                <!-- Needed for artifacts like com.github.jai-imageio:jai-imageio-core -->
                <repository>
                        <id>jitpack.io</id>
                        <url>https://jitpack.io</url>
                </repository>
        </repositories>

	<dependencies>
		<!-- Spring + Redis + WebFlux -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis-reactive</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- Upstox SDK -->
		<dependency>
			<groupId>com.upstox.api</groupId>
			<artifactId>upstox-java-sdk</artifactId>
			<version>1.11.1</version>
		</dependency>

		<!-- Reactor Netty WS client -->
		<dependency>
			<groupId>io.projectreactor.netty</groupId>
			<artifactId>reactor-netty</artifactId>
		</dependency>

		<!-- Protobuf runtime -->
		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java</artifactId>
			<version>${protoc.version}</version>
		</dependency>
		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java-util</artifactId>
			<version>${protoc.version}</version>
		</dependency>

		<!-- Lombok -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- Testing -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.projectreactor</groupId>
			<artifactId>reactor-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.influxdb</groupId>
			<artifactId>influxdb-client-java</artifactId>
			<version>6.9.0</version>
		</dependency>
		<dependency>
			<groupId>com.squareup.okio</groupId>
			<artifactId>okio</artifactId>
			<version>3.4.0</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb</artifactId>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<!-- Java compiler & Lombok -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
                                        <annotationProcessorPaths>
                                                <path>
                                                        <groupId>org.projectlombok</groupId>
                                                        <artifactId>lombok</artifactId>
                                                        <version>1.18.30</version>
                                                </path>
                                        </annotationProcessorPaths>
                                </configuration>
                        </plugin>

			<!-- Spring Boot repackage -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>

			<!-- OS detection, needed for protoc classifier -->
			<plugin>
				<groupId>kr.motd.maven</groupId>
				<artifactId>os-maven-plugin</artifactId>
				<version>1.7.0</version>
				<executions>
					<execution>
						<goals>
							<goal>detect</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Protobuf code generation -->
			<plugin>
				<groupId>org.xolstice.maven.plugins</groupId>
				<artifactId>protobuf-maven-plugin</artifactId>
				<version>0.6.1</version>
				<configuration>
					<!-- must match your protobuf-java version -->
					<!--suppress UnresolvedMavenProperty -->
					<protocArtifact>
						com.google.protobuf:protoc:${protoc.version}:exe:${os.detected.classifier}
					</protocArtifact>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>compile</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			 <plugin>
      <groupId>com.github.eirslett</groupId>
      <artifactId>frontend-maven-plugin</artifactId>
      <version>1.13.4</version>

      <!-- run npm inside frontend/ -->
      <configuration>
        <workingDirectory>frontend</workingDirectory>
        <npmInheritsProxyConfigFromMaven>false</npmInheritsProxyConfigFromMaven>
        <skip>${skipFrontend}</skip>
      </configuration>

      <executions>
        <execution>
          <id>install node and npm</id>
          <goals><goal>install-node-and-npm</goal></goals>
          <configuration><skip>true</skip></configuration>
        </execution>
        <execution>
          <id>npm install</id>
          <goals><goal>npm</goal></goals>
          <configuration><arguments>install</arguments></configuration>
        </execution>
        <execution>
          <id>ng build</id>
          <phase>generate-resources</phase>
          <goals><goal>npm</goal></goals>
          <configuration><arguments>run build -- --configuration production</arguments></configuration>
        </execution>
      </executions>
    </plugin>

    <!-- copy dist/ to Spring Bootâ€™s static/ -->
    <plugin>
      <artifactId>maven-resources-plugin</artifactId>
      <executions>
        <execution>
          <id>copy-angular</id>
          <phase>process-resources</phase>
          <goals><goal>copy-resources</goal></goals>
          <configuration>
            <outputDirectory>${project.basedir}/src/main/resources/static</outputDirectory>
            <resources>
              <resource>
                <directory>${project.basedir}/frontend/dist/frontend</directory>
                <filtering>false</filtering>
              </resource>
            </resources>
          </configuration>
        </execution>
      </executions>
    </plugin>
		</plugins>
	</build>
</project>
